package com.example.pixelpeppers.ui.screens

import LoadingAnimation
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import com.example.pixelpeppers.R
import com.example.pixelpeppers.models.Game
import com.example.pixelpeppers.repositories.GamesRepository
import com.example.pixelpeppers.ui.components.CircleIconButton
import com.example.pixelpeppers.ui.components.GameCarousell
import com.example.pixelpeppers.ui.components.LargeGamePreview

@Composable
fun MainMenu(
    modifier: Modifier = Modifier,
) {
    val scrollState = rememberScrollState()
    val trendingGame = remember { mutableStateOf<Game?>(null) }
    val gamesMap = remember { mutableStateMapOf<String, List<Game>>() }
    val topics = listOf<String>("tmp", "tmp2", "tmp3")

    LaunchedEffect(Unit) {
        GamesRepository.getGame(17000) {
            trendingGame.value = it
        }
        for (topic in topics) {
            GamesRepository.searchGames("stardew", limit = 20) {
                gamesMap[topic] = it
            }
        }
    }
    Box(
        contentAlignment = Alignment.Center,
        modifier = Modifier
            .background(MaterialTheme.colorScheme.background)
            .fillMaxSize(),
    ) {
        if (trendingGame.value == null || gamesMap.size != topics.size) {
            LoadingAnimation()
        } else {
            Column (
                verticalArrangement = Arrangement.spacedBy(8.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = modifier
                    .verticalScroll(scrollState)
                    .padding(top = 35.dp, bottom = 35.dp)

            ) {
                Row(
                    verticalAlignment = Alignment.Top,
                    horizontalArrangement = Arrangement.spacedBy(6.dp),//, Alignment.End),
                    modifier = modifier
                        .fillMaxWidth()
                        .padding(start = 8.dp, end = 8.dp)
                ) {
                    Text(
                        text = "Hey, User",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.onBackground,
                        maxLines = 1,
                        modifier = Modifier
                            .align(Alignment.CenterVertically)
                    )
                    Spacer(Modifier.weight(1f))
                    CircleIconButton(
                        icon = painterResource(id = R.drawable.pixelpeppers),
                        description = ""
                    )
                    CircleIconButton(
                        icon = painterResource(id = R.drawable.pixelpeppers),
                        description = ""
                    )
                }
                // highlighted game
                Row (
                    verticalAlignment = Alignment.Top,
                ) {
                    LargeGamePreview(game = trendingGame.value!!)
                }
                // Autogenerated X game lists
                for (entry in gamesMap.entries.iterator()) {
                    Row (
                        modifier = Modifier
                            .fillMaxWidth()
                    ) {
                        Column {
                            Text(
                                text = entry.key,
                                style = MaterialTheme.typography.titleMedium,
                                color = MaterialTheme.colorScheme.onBackground,
                                maxLines = 1,
                                modifier = Modifier
                                    .padding(start = 8.dp)
                            )

                            GameCarousell(
                                games = entry.value,
                                modifier = Modifier
                                    .fillMaxWidth()
                            )
                        }
                    }
                }
            }
        }
    }
}